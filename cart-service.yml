server:
  port: 8082
spring:
  application:
    name: CART-SERVICE
  data:
    redis:
      host: localhost
      port: 6379

resilience4j:
  circuitbreaker:
    instances:
      cartToProduct:
        slidingWindowType: COUNT_BASED  #Kiểu thông kê: số lần ội
        slidingWindowSize: 20 #Đánh giá 20 request gần nhất
        minimumNumberOfCalls: 10 #tính % lỗi/% chậm sau khi đã có tối thiểu 10 request.
        failureRateThreshold: 50 #>=50% request bị lỗi → MỞ mạch (OPEN).
        slowCallDurationThreshold: 2s #>2s ->chậm -> OPEN
        slowCallRateThreshold: 60 #>60% request chậm -> OPEN
        waitDurationInOpenState: 20s #Khi OPEN, chờ 20s rồi chuyển HALF_OPEN để “thử lại”
        permittedNumberOfCallsInHalfOpenState: 3 # Ở HALF_OPEN, chỉ cho phép 3 rq thử. Thành công → CLOSED, thất bại/chậm → MỞ lại.
        automaticTransitionFromOpenToHalfOpenEnabled: true #Tự động chuyển từ OPEN → HALF_OPEN sau khi hết thời gian chờ (không cần một request kích hoạt).
  retry:
    instances:
      cartToProduct:
        maxAttempts: 3 # Tổng số lần thử (1 lần đầu + 2 retry). Nên nhỏ để tránh “đốt” tài nguyên downstream.
        waitDuration: 300ms # Thời gian chờ giữa các lần retry (backoff đơn giản).

#  timelimiter:
#    instances:
#      cartToProduct:
#        timeoutDuration: 3s # Cắt rq vượt 3s → ném TimeoutException (được CB tính là lỗi).


eureka:
  instance:
    hostname: localhost
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    sampling:
      probability: 1.0

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    org.springframework.web: DEBUG

