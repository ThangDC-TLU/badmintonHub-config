server:
  port: 8085

spring:
  application:
    name: GATEWAY-SERVICE

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000

  cloud:
    gateway:
      httpclient:
        connect-timeout: 2000          # TCP connect 2s
        response-timeout: 30s          # Tổng thời gian chờ HTTP client của Gateway (>= timelimiter lớn nhất)
      routes:
        - id: PRODUCT-SERVICE
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/v1/products/**, /api/v1/categories/**
          filters:
            - name: CircuitBreaker
              args:
                name: productClient
                fallbackUri: forward:/__fallback/product
                statusCodes: 500,502,503,504     # chỉ fallback khi backend 5xx

        - id: CART-SERVICE
          uri: lb://CART-SERVICE
          predicates:
            - Path=/api/v1/carts/**
          filters:
            - name: CircuitBreaker
              args:
                name: cartClient
                fallbackUri: forward:/__fallback/cart
                statusCodes: 500,502,503,504

        - id: ORDER-SERVICE
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/v1/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderClient
                fallbackUri: forward:/__fallback/order
                statusCodes: 500,502,503,504     # tránh coi 4xx nghiệp vụ là lỗi CB

        - id: NOTI-SERVICE
          uri: lb://NOTI-SERVICE
          predicates:
            - Path=/api/v1/notifications/**
          filters:
            - name: CircuitBreaker
              args:
                name: notiClient
                fallbackUri: forward:/__fallback/noti
                statusCodes: 500,502,503,504

        - id: AUTH-SERVICE
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/oauth2/v1/**, /api/v1/auth/**, /api/v1/users/**, /api/v1/address/**, /connect/v1/**
          filters:
            - name: CircuitBreaker
              args:
                name: authClient
                fallbackUri: forward:/__fallback/auth
                statusCodes: 500,502,503,504

resilience4j:
  circuitbreaker:
    configs:
      defaultProfile:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        slowCallDurationThreshold: 4s         # ngưỡng slow-call mặc định
        slowCallRateThreshold: 60
        waitDurationInOpenState: 10s          # mở mạch 10s rồi thử lại
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
    instances:
      productClient:
        baseConfig: defaultProfile
      cartClient:
        baseConfig: defaultProfile
      orderClient:
        baseConfig: defaultProfile
        slowCallDurationThreshold: 8s         # order có PayPal/auth/cart → nới ngưỡng
      notiClient:
        baseConfig: defaultProfile
      authClient:
        baseConfig: defaultProfile
        slowCallDurationThreshold: 3s

  timelimiter:
    instances:
      productClient:
        timeoutDuration: 3s                   # <= response-timeout và phù hợp SLA backend
        cancelRunningFuture: true
      cartClient:
        timeoutDuration: 4s
        cancelRunningFuture: true
      orderClient:
        timeoutDuration: 25s                  # lớn nhất; vẫn < response-timeout (30s)
        cancelRunningFuture: true
      notiClient:
        timeoutDuration: 3s
        cancelRunningFuture: true
      authClient:
        timeoutDuration: 3s
        cancelRunningFuture: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    show-details: always

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.cloud.gateway.filter.factory.SpringCloudCircuitBreakerResilience4JFilterFactory: DEBUG
    io.github.resilience4j.circuitbreaker: DEBUG
    reactor.netty.http.client: DEBUG

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    urls:                             # tập trung docs qua các endpoint /openapi/*
      - name: product-service
        url: /openapi/product
      - name: order-service
        url: /openapi/order
      - name: auth-service
        url: /openapi/auth
      - name: cart-service
        url: /openapi/cart
      - name: noti-service
        url: /openapi/noti
    persistAuthorization: true        # giữ token giữa các tab
    oauth:
      client-id: client               # clientId đăng ký
      client-secret: secret
      use-pkce-with-authorization-code-grant: false   # dùng password grant
      scope-separator: " "
  api-docs:
    enabled: true

auth:
  token-url: http://localhost:8085/oauth2/v1/token
  scopes: client-internal